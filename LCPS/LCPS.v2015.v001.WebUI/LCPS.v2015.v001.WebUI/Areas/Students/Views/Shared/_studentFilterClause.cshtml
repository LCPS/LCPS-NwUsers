@using LCPS.v2015.v001.WebUI.Areas.Students.Models;
@using LCPS.v2015.v001.NwUsers.Students;
@using LCPS.v2015.v001.WebUI.Infrastructure;
@using LCPS.v2015.v001.NwUsers.Filters;

@model StudentFilterClauseModel

<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.0/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.0/js/bootstrap-toggle.min.js"></script>

<style>
    .cb {
        margin-right: 18px;
    }
</style>

<script>

    $(document).ready(function () {
        //$('[id*="Conjunction"]').hide('slow');
        //$('.dq').hide('slow');

        setStudentField();

        setStudentConjn();
    });


    $(function () {
        $('.cb-stu').change(function () {
            setStudentField();

            setStudentConjn();
        });
    })

    function setStudentField() {
        var cb = $('.cb-stu');

        cb.each(function () {
            var cn = $(this).attr('id').replace('Include', '');
            var checked = $(this).prop('checked');
            var fldId = "#Stu-" + cn;
            var fld = $(fldId);

            if (checked)
                fld.show('slow');
            else
                fld.hide('slow');
        })

    }

    function setStudentConjn() {
        var checked = $('.cb-stu[id*="Include"]:checked');

        checked.each(function () {
            var cn = $(this).attr('id');
            var f = cn.replace("Include", "");
            var cnj = $('.stu-cnj[id^=' + f);

            var idx = checked.index($(this));

            if (idx == 0)
                cnj.hide('slow');
            else
                cnj.show('slow');
        });
    }
    $(function () {
        $(".cb-stu[id=BuildingInclude]").bootstrapToggle({
            size: 'small',
            on: 'Building',
            off: 'Building',
            onstyle: 'success',
            offstyle: 'danger'
        });

        $(".cb-stu[id=InstructionalLevelInclude]").bootstrapToggle({
            size: 'small',
            on: 'Level',
            off: 'Level',
            onstyle: 'success',
            offstyle: 'danger'
        });

        $(".cb-stu[id=StatusInclude]").bootstrapToggle({
            size: 'small',
            on: 'Status',
            off: 'Status',
            onstyle: 'success',
            offstyle: 'danger'
        });

        $(".cb-stu[id=NameInclude]").bootstrapToggle({
            size: 'small',
            on: 'Name',
            off: 'Name',
            onstyle: 'success',
            offstyle: 'danger'
        });

        $(".cb-stu[id=StudentIdInclude]").bootstrapToggle({
            size: 'small',
            on: 'ID',
            off: 'ID',
            onstyle: 'success',
            offstyle: 'danger'
        });
    })




    $(function () {
        $("#BuildingValue").change(function () {
            var selectedItem = $(this).val();
            var ddlChild = $("#InstructionalLevelValue");
            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "/Students/Student/GetInstructionalLevels",
                data: { "buildingId": selectedItem },
                success: function (data) {
                    ddlChild.html('');
                    $.each(data, function (id, option) {
                        ddlChild.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve levels.');
                    statesProgress.hide();
                }
            });
        });
    });

</script>

@using (Html.BeginForm(Model.FormAction, Model.FormController, new { area = Model.FormArea }, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.FilterId)
    @Html.HiddenFor(model => model.FormArea)
    @Html.HiddenFor(model => model.FormController)
    @Html.HiddenFor(model => model.FormAction)


    <div class="form-inline">
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.BuildingInclude, new { @class = "cb-stu" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.InstructionalLevelInclude, new { @class = "cb-stu" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.StatusInclude, new { @class = "cb-stu" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.NameInclude, new { @class = "cb-stu" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                @Html.CheckBoxFor(model => model.StudentIdInclude, new { @class = "cb-stu" })
            </div>
        </div>
    </div>


    <hr />

    <div class="form-horizontal">
        @if (Model.GetClauseCount(Model.FilterId) > 0)
        {
            <div class="form-group form-group-sm dq">
                <div class="col-md-1">
                    @Html.EnumDropDownListFor(model => model.ClauseConjunction, new { @class = "form-control input-sm ddl", @style = "width:90px;", })
                </div>
            </div>
        }
        <div id="Stu-Building" class="form-group form-group-sm dq">
            <div class="col-md-1">
                <strong>@Html.LabelFor(model => model.BuildingValue)</strong>
            </div>
            <div class="col-md-1">
                &nbsp;
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.BuildingOperator, new { @class = "form-control input-sm", style = "width: 90px;" })
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.BuildingValue, DynamicStudentClause.GetBuildings(), new { @class = "form-control input-sm" })
            </div>
        </div>


        <div id="Stu-InstructionalLevel" class="form-group form-group-sm  dq">
            <div class="col-md-1">
                <strong>@Html.LabelFor(model => model.InstructionalLevelValue)</strong>
            </div>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.InstructionalLevelConjunction, new { @class = "form-control input-sm ddl stu-cnj", @style = "width:90px;" })
            </span>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.InstructionalLevelOperator, new { @class = "form-control input-sm", @style = "width:90px;" })
            </span>
            <span class="col-md-4">
                @Html.DropDownListFor(model => model.InstructionalLevelValue, DynamicStudentClause.GetInstructionalLevels(null), new { @class = "form-control input-sm", })
            </span>
        </div>
        <div class="form-group form-group-sm  dq" id="Stu-Status">
            <div class="col-md-1">
                <strong>@Html.LabelFor(model => model.StatusValue)</strong>
            </div>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StatusConjunction, new { @class = "form-control input-sm ddl stu-cnj", @style = "width:90px;" })
            </span>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StatusOperator, new { @class = "form-control input-sm", @style = "width:90px;" })
            </span>
            <span class="col-md-4">
                @Html.EnumDropDownListFor(model => model.StatusValue, new { @class = "form-control input-sm", @style = "width:120px;" })
            </span>
        </div>
        <div class="form-group form-group-sm  dq" id="Stu-Name">
            <div class="col-md-1" style="white-space: nowrap;">
                <strong>@Html.LabelFor(model => model.NameValue)</strong>
            </div>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.NameConjunction, new { @class = "form-control input-sm ddl stu-cnj", @style = "width:90px;" })
            </span>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.NameOperator, new { @class = "form-control input-sm", @style = "width:90px;" })
            </span>
            <span class="col-md-4">
                @Html.TextBoxFor(model => model.NameValue, new { @class = "form-control input-sm", @style = "width:220px;" })
            </span>
        </div>

        <div class="form-group form-group-sm  dq" id="Stu-StudentId">
            <div class="col-md-1">
                <strong>@Html.LabelFor(model => model.StudentIdValue)</strong>
            </div>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StudentIdConjunction, new { @class = "form-control input-sm ddl stu-cnj", @style = "width:90px;" })
            </span>
            <span class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StudentIdOperator, new { @class = "form-control input-sm", @style = "width:90px;" })
            </span>
            <span class="col-md-4">
                @Html.TextBoxFor(model => model.StudentIdValue, new { @class = "form-control input-sm", @style = "width:220px;" })
            </span>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-1">
                <input type="submit" value="@Model.SubmitText" class="btn btn-info">
            </div>
        </div>
    </div>
}
