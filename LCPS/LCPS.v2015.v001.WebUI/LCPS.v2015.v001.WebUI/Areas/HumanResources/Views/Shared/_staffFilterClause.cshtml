@using LCPS.v2015.v001.NwUsers.Infrastructure;
@using LCPS.v2015.v001.NwUsers.Filters;
@using LCPS.v2015.v001.WebUI.Areas.HumanResources.Models;

@model StaffFilterClauseModel


<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.0/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.0/js/bootstrap-toggle.min.js"></script>

<script>
    $(window).load(function () {
        setFieldEnableStatus();
        setConjunctionStatus();

        GetEmployeeTypes();
        GetJobTitles();
    });


    $(function () {
        $('.cb').change(function () {

            setFieldEnableStatus();

            setConjunctionStatus();
        });
    })

    function setFieldEnableStatus() {
        var cb = document.getElementsByClassName('cb');

        for (cx = 0; cx < cb.length; cx++) {
            cn = cb[cx].id.replace('Include', '');
            checked = cb[cx].checked;
            if (checked)
                $('.' + cn).show('slow');
            else
                $('.' + cn).hide('slow');
        }
    }

    function setConjunctionStatus() {

        var cbs = $('input:checkbox');
        var checked = $('input:checkbox[id*="Include"]:checked');
        var ddl = $('[id*="Conjunction"]');


        if (checked.length == 0) {
            ddl.hide('slow');
            return;
        }

        idx = (cbs.index(checked[0]));

        for (y = 0; y < idx; y++) {
            cid = "#" + ddl[y].id;
            $(cid).hide('slow');
        }

        for (x = idx; x < ddl.length; x++) {
            cid = "#" + ddl[x].id;
            $(cid).show('slow');
        }
    }

    $(function () {
        $("#BuildingInclude").bootstrapToggle({
            size: 'small',
            on: 'Building',
            off: 'Building',
            onstyle: 'success',
            offstyle: 'danger'
        });

        $("#EmployeeTypeInclude").bootstrapToggle({
            size: 'small',
            on: 'Type',
            off: 'Type',
            onstyle: 'success',
            offstyle: 'danger'

        });

        $("#JobTitleInclude").bootstrapToggle({
            size: 'small',
            on: 'Title',
            off: 'Title',
            onstyle: 'success',
            offstyle: 'danger'

        });

        $("#StatusInclude").bootstrapToggle({
            size: 'small',
            on: 'Status',
            off: 'Status',
            onstyle: 'success',
            offstyle: 'danger'

        });

        $("#StaffIdInclude").bootstrapToggle({
            size: 'small',
            on: 'ID',
            off: 'ID',
            onstyle: 'success',
            offstyle: 'danger'

        });

        $("#LastNameInclude").bootstrapToggle({
            size: 'small',
            on: 'Name',
            off: 'Name',
            onstyle: 'success',
            offstyle: 'danger'

        });

    })

    $(function () {
        $("#BuildingValue").change(function () {
            GetEmployeeTypes();
            GetJobTitles();
        });
    });

    $(function () {
        $("#EmployeeTypeValue").change(function () {
            GetJobTitles();
        });
    });


    function GetEmployeeTypes() {

        bddl = document.getElementById("BuildingValue");
        bcb = document.getElementById("BuildingInclude");
        bchk = $('#BuildingInclude').prop('checked');

        etdl = $('#EmployeeTypeValue');

        etcb = $('#EmployeeTypeInclude');

        etcn = $('#EmployeeTypeConjunction');

        var bid = null;

        if (bchk)
            bid = $("#BuildingValue").val();


        $.ajax({
            cache: false,
            type: "GET",
            url: "/HumanResources/HRStaff/GetEmployeeTypes",
            data: { "buildingId": bid },
            success: function (data) {
                etdl.html('');
                $.each(data, function (id, option) {
                    etdl.append($('<option></option>').val(option.id).html(option.name));
                });
                statesProgress.hide();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve levels.');
                statesProgress.hide();
            }
        });

        GetJobTitles();
    }

    function GetJobTitles() {
        var bid = null;
        var bchk = $('#BuildingInclude').prop('checked');
        if (bchk)
            bid = $("#BuildingValue").val();

        var eid = null;
        var echk = $('#EmployeeTypeInclude').prop('checked');
        if (echk)
            eid = $("#EmployeeTypeValue").val();


        var jtdl = $("#JobTitleValue");

        $.ajax({
            cache: false,
            type: "GET",
            url: "/HumanResources/HRStaff/GetJobTitles",
            data: { "buildingId": bid, "employeeTypeId": eid },
            success: function (data) {
                jtdl.html('');
                $.each(data, function (id, option) {
                    jtdl.append($('<option></option>').val(option.id).html(option.name));
                });
                statesProgress.hide();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve levels.');
                statesProgress.hide();
            }
        });

    }
</script>

@using (Html.BeginForm(Model.FormAction, Model.FormController, new { area = Model.FormArea }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.FilterId)
    @Html.HiddenFor(model => model.StaffFilterClauseId)
    @Html.HiddenFor(model => model.FormAction)
    @Html.HiddenFor(model => model.FormController)
    @Html.HiddenFor(model => model.FormArea)
    @Html.HiddenFor(model => model.SubmitText)



    <div class="form-inline">
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.BuildingInclude, new { @class = "cb" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.EmployeeTypeInclude, new { @class = "cb" })
            </div>
        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.JobTitleInclude, new { @class = "cb" })
            </div>

        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.StatusInclude, new { @class = "cb" })
            </div>

        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.StaffIdInclude, new { @class = "cb" })
            </div>

        </div>
        <div class="form-group form-group-sm">
            <div class="col-md-2">
                @Html.CheckBoxFor(model => model.LastNameInclude, new { @class = "cb" })
            </div>

        </div>
    </div>

    <hr />

    <div class="form-horizontal">
        <div class="text-danger">
            @Html.ValidationSummary(false)
        </div>


        @if (Model.GetClauseCount(Model.FilterId) > 0)
        {
            <div class="form-group form-group-sm">
                <div class="col-md-1">
                    @Html.EnumDropDownListFor(model => model.ClauseConjunction, new { @class = "@form-control input-sm" })
                </div>
            </div>
        }


        <div class="form-group form-group-sm Building">
            <div class="col-md-2">
                @Html.LabelFor(model => model.BuildingValue)
            </div>
                <div class="col-md-1">
                    @Html.EnumDropDownListFor(model => model.BuildingOperator, new { @class = "form-control input-sm", style = "width: 90px" })
                </div>
                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.BuildingValue, DynamicStaffClause.GetBuildings(), new { @class = "form-control input-sm" })
                </div>
            </div>
        <div class="form-group form-group-sm EmployeeType">
            <div class="col-md-1">
                @Html.LabelFor(model => model.EmployeeTypeValue)
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.EmployeeTypeConjunction, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.EmployeeTypeOperator, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.EmployeeTypeValue, new List<SelectListItem>(), new { @class = "form-control input-sm" })
            </div>
        </div>
        <div class="form-group form-group-sm JobTitle">

            <div class="col-md-1">
                @Html.LabelFor(model => model.JobTitleValue)
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.JobTitleConjunction, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.JobTitleOperator, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.JobTitleValue, new List<SelectListItem>(), new { @class = "form-control input-sm" })
            </div>
        </div>
        <div class="form-group form-group-sm Status">
            <div class="col-md-1">
                @Html.LabelFor(model => model.StatusValue)
            </div>

            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StatusConjunction, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StatusOperator, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-4">
                @Html.EnumDropDownListFor(model => model.StatusValue, new { @class = "form-control input-sm" })
            </div>
        </div>

        <div class="form-group form-group-sm StaffId">
            <div class="col-md-1">
                @Html.LabelFor(model => model.StaffIdValue)
            </div>

            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StaffIdConjunction, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.StaffIdOperator, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.StaffIdValue, new { @class = "form-control input-sm" })
            </div>
        </div>

        <div class="form-group form-group-sm LastName">
            <div class="col-md-1">
                @Html.LabelFor(model => model.LastNameValue)
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.LastNameConjunction, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-1">
                @Html.EnumDropDownListFor(model => model.LastNameOperator, new { @class = "form-control input-sm", style = "width: 90px" })
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.LastNameValue, new { @class = "form-control input-sm" })
            </div>
        </div>

        <div class="form-group form-group-sm">
            <div class="col-md-offset-1">
                <input type="submit" value="@Model.SubmitText" class="btn btn-success" />
            </div>
        </div>
    </div>
}


