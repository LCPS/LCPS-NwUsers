@using LCPS.v2015.v001.WebUI.Areas.Filters.Models


@model StaffFilterClauseModel


<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.0/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.0/js/bootstrap-toggle.min.js"></script>

<script>
    $(window).load(function () {
        var cb = document.getElementsByClassName('cb');


        for(i = 0; i < cb.length; i++)
        {

            f = cb[i].id.replace('Include', '');

            var checked = cb[i].checked

            op = document.getElementById(f + 'Operator');

            op.disabled = (!checked);

            v = document.getElementById(f + 'Value');
            v.disabled = (!checked);

            con = document.getElementById(f + 'Conjunction');

            if (con != null)
                con.disabled = (!checked);
        }
    });

    $(function () {
        $('.cb').bootstrapToggle({
            on: 'Filter On',
            off: 'Filter Off',
            onstyle: 'success',
            offstyle: 'danger',
            size: 'mini'
        });
    })

    $(function () {
        $('.cb').change(function () {

            cbId = $(this).prop('id');
            f = cbId.replace('Include', '');

            op = document.getElementById(f + 'Operator');
            op.disabled = (!$(this).prop('checked'));

            v = document.getElementById(f + 'Value');
            v.disabled = (!$(this).prop('checked'));

            con = document.getElementById(f + 'Conjunction');
            con.disabled = (!$(this).prop('checked'));
        });
    })

    $(function () {
        $("#BuildingValue").change(function () {



            var selectedItem = $(this).val();
            var ddlChild = $("#InstructionalLevelValue");
            var statesProgress = $("#states-loading-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "/Students/Student/GetInstructionalLevels",
                data: { "buildingId": selectedItem },
                success: function (data) {
                    ddlChild.html('');
                    $.each(data, function (id, option) {
                        ddlChild.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve levels.');
                    statesProgress.hide();
                }
            });
        });
    });

</script>

@using (Html.BeginForm(Model.FormAction, Model.FormController, new { area = Model.FormArea }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Clause.StaffFilterClauseId)

    <div class="form-inline">
        <p>
            @Html.CheckBoxFor(model => model.Clause.BuildingInclude, new { @class = "cb" })
            @Html.LabelFor(model => model.Clause.BuildingValue)
        </p>
        <p>
            @Html.EnumDropDownListFor(model => model.Clause.BuildingOperator)
            @Html.DropDownListFor(model => model.Clause.BuildingValue, Model.GetBuildingList())
        </p>
    </div>

}